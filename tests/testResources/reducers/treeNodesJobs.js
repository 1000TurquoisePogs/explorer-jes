/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBM Corporation 2018
 */

import { Map, List } from 'immutable';
import { ROOT_NODE_ID } from '../../../WebContent/js/reducers/treeNodesJobs';
import {
    ROOT_NODE_TYPE,
} from '../../../WebContent/js/containers/JobNode';

const ROOT_NODE = Map({
    id: ROOT_NODE_ID,
    label: 'JES Jobs',
    nodeType: ROOT_NODE_TYPE,
    childNodesURI: `${ROOT_NODE_ID}?owner=`,
    childIds: List([]),
    isFetchingChildren: false,
    isToggled: false,
    jobName: '',
});

export const baseTreeNodesJobs = Map({
    [ROOT_NODE_ID]: ROOT_NODE,
});

export const treeNodesJobsChildDataATLJ0003 = [{
    name: 'ATLJ0003',
    jobInstances: [{
        owner: 'JCAIN',
        jobId: 'JOB05944',
        type: 'JOB',
        status: 'OUTPUT',
        returnCode: 'CC 0000',
    }],
}];

export const receivedTreeNodesJobs = Map({
    jobs: Map({
        id: 'jobs',
        label: 'JES Jobs',
        nodeType: 'ROOT',
        childNodesURI: 'jobs?owner=',
        childIds: List(['jobs/ATLJ0003']),
        isFetchingChildren: false,
        isToggled: true,
        jobName: '',
    }),
    'jobs/ATLJ0003': Map({
        id: 'jobs/ATLJ0003',
        label: 'ATLJ0003',
        nodeType: 'JOB_NAME',
        isFetchingChildren: false,
        childIds: List(['jobs/ATLJ0003/ids/JOB05944']),
        childNodesURI: 'jobs/ATLJ0003/ids',
        jobName: 'ATLJ0003',
        isToggled: false,
    }),
    'jobs/ATLJ0003/ids/JOB05944': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'JOB05944',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944',
        nodeType: 'JOB_INSTANCE',
        childIds: List([
            'jobs/ATLJ0003/ids/JOB05944/steps',
            'jobs/ATLJ0003/ids/JOB05944/files']),
        returnCode: 'CC 0000',
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'Steps',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/steps',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps',
        nodeType: 'JOB_STEP_PARENT',
        childIds: List([]),
    }),
    'jobs/ATLJ0003/ids/JOB05944/files': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'Files',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/files',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/files',
        nodeType: 'JOB_OUTPUT_FILE_PARENT',
        childIds: List([]),
    }),
});

export const receivedTreeNodesJobsAutoToggle = Map({
    jobs: Map({
        id: 'jobs',
        label: 'JES Jobs',
        nodeType: 'ROOT',
        childNodesURI: 'jobs?owner=',
        childIds: List(['jobs/ATLJ0003']),
        isFetchingChildren: false,
        isToggled: true,
        jobName: '',
    }),
    'jobs/ATLJ0003': Map({
        id: 'jobs/ATLJ0003',
        label: 'ATLJ0003',
        nodeType: 'JOB_NAME',
        isFetchingChildren: false,
        childIds: List(['jobs/ATLJ0003/ids/JOB05944']),
        childNodesURI: 'jobs/ATLJ0003/ids',
        jobName: 'ATLJ0003',
        isToggled: true,
    }),
    'jobs/ATLJ0003/ids/JOB05944': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'JOB05944',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944',
        nodeType: 'JOB_INSTANCE',
        childIds: List([
            'jobs/ATLJ0003/ids/JOB05944/steps',
            'jobs/ATLJ0003/ids/JOB05944/files']),
        returnCode: 'CC 0000',
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'Steps',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/steps',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps',
        nodeType: 'JOB_STEP_PARENT',
        childIds: List([]),
    }),
    'jobs/ATLJ0003/ids/JOB05944/files': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'Files',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/files',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/files',
        nodeType: 'JOB_OUTPUT_FILE_PARENT',
        childIds: List([]),
    }),
});

export const toggledTreeNodesJobs = Map({
    jobs: Map({
        id: 'jobs',
        label: 'JES Jobs',
        nodeType: 'ROOT',
        childNodesURI: 'jobs?owner=',
        childIds: List(['jobs/ATLJ0003']),
        isFetchingChildren: false,
        isToggled: true,
        jobName: '',
    }),
    'jobs/ATLJ0003': Map({
        id: 'jobs/ATLJ0003',
        label: 'ATLJ0003',
        nodeType: 'JOB_NAME',
        isFetchingChildren: false,
        childIds: List(['jobs/ATLJ0003/ids/JOB05944']),
        childNodesURI: 'jobs/ATLJ0003/ids',
        jobName: 'ATLJ0003',
        isToggled: true,
    }),
    'jobs/ATLJ0003/ids/JOB05944': Map({
        isToggled: true,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'JOB05944',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944',
        nodeType: 'JOB_INSTANCE',
        childIds: List([
            'jobs/ATLJ0003/ids/JOB05944/steps',
            'jobs/ATLJ0003/ids/JOB05944/files']),
        returnCode: 'CC 0000',
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'Steps',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/steps',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps',
        nodeType: 'JOB_STEP_PARENT',
        childIds: List([]),
    }),
    'jobs/ATLJ0003/ids/JOB05944/files': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'Files',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/files',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/files',
        nodeType: 'JOB_OUTPUT_FILE_PARENT',
        childIds: List([]),
    }),
});

export const treeNodesJobsChildDataSteps = [{
    name: 'UNIT',
    program: 'IEFBR14',
    step: 1,
}];

export const receivedStepsTreeNodesJobs = Map({
    jobs: Map({
        id: 'jobs',
        label: 'JES Jobs',
        nodeType: 'ROOT',
        childNodesURI: 'jobs?owner=',
        childIds: List(['jobs/ATLJ0003']),
        isFetchingChildren: false,
        isToggled: true,
        jobName: '',
    }),
    'jobs/ATLJ0003': Map({
        id: 'jobs/ATLJ0003',
        label: 'ATLJ0003',
        nodeType: 'JOB_NAME',
        isFetchingChildren: false,
        childIds: List(['jobs/ATLJ0003/ids/JOB05944']),
        childNodesURI: 'jobs/ATLJ0003/ids',
        jobName: 'ATLJ0003',
        isToggled: true,
    }),
    'jobs/ATLJ0003/ids/JOB05944': Map({
        isToggled: true,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'JOB05944',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944',
        nodeType: 'JOB_INSTANCE',
        childIds: List([
            'jobs/ATLJ0003/ids/JOB05944/steps',
            'jobs/ATLJ0003/ids/JOB05944/files']),
        returnCode: 'CC 0000',
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps': Map({
        isToggled: true,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'Steps',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/steps',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps',
        nodeType: 'JOB_STEP_PARENT',
        childIds: List(['jobs/ATLJ0003/ids/JOB05944/steps/1']),
    }),
    'jobs/ATLJ0003/ids/JOB05944/files': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'Files',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/files',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/files',
        nodeType: 'JOB_OUTPUT_FILE_PARENT',
        childIds: List([]),
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps/1': Map({
        program: 'IEFBR14',
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'UNIT',
        stepNumber: 1,
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/steps/1/dds',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps/1',
        nodeType: 'JOB_STEP',
        childIds: List([]),
    }),
});

export const treeNodesJobsChildDataFiles = [
    {
        ddname: 'JESMSGLG',
        recfm: 'UA',
        lrecl: 133,
        byteCount: 1141,
        recordCount: 20,
        id: 2 },
    {
        ddname: 'JESJCL',
        recfm: 'V',
        lrecl: 136,
        byteCount: 346,
        recordCount: 7,
        id: 3 },
    {
        ddname: 'JESYSMSG',
        recfm: 'VA',
        lrecl: 137,
        byteCount: 1052,
        recordCount: 18,
        id: 4,
    }];

export const receivedFilesTreeNodesJobs = Map({
    jobs: Map({
        id: 'jobs',
        label: 'JES Jobs',
        nodeType: 'ROOT',
        childNodesURI: 'jobs?owner=',
        childIds: List(['jobs/ATLJ0003']),
        isFetchingChildren: false,
        isToggled: true,
        jobName: '',
    }),
    'jobs/ATLJ0003': Map({
        id: 'jobs/ATLJ0003',
        label: 'ATLJ0003',
        nodeType: 'JOB_NAME',
        isFetchingChildren: false,
        childIds: List(['jobs/ATLJ0003/ids/JOB05944']),
        childNodesURI: 'jobs/ATLJ0003/ids',
        jobName: 'ATLJ0003',
        isToggled: true,
    }),
    'jobs/ATLJ0003/ids/JOB05944': Map({
        isToggled: true,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'JOB05944',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944',
        nodeType: 'JOB_INSTANCE',
        childIds: List([
            'jobs/ATLJ0003/ids/JOB05944/steps',
            'jobs/ATLJ0003/ids/JOB05944/files']),
        returnCode: 'CC 0000',
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'Steps',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/steps',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps',
        nodeType: 'JOB_STEP_PARENT',
        childIds: List([]),
    }),
    'jobs/ATLJ0003/ids/JOB05944/files': Map({
        isToggled: true,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'Files',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/files',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/files',
        nodeType: 'JOB_OUTPUT_FILE_PARENT',
        childIds: List([
            'jobs/ATLJ0003/ids/JOB05944/files/2',
            'jobs/ATLJ0003/ids/JOB05944/files/3',
            'jobs/ATLJ0003/ids/JOB05944/files/4']),
    }),
    'jobs/ATLJ0003/ids/JOB05944/files/2': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'JESMSGLG',
        stepName: undefined,
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/files/2',
        nodeType: 'JOB_OUTPUT_FILE',
        childIds: null,
        hasContent: true,
    }),
    'jobs/ATLJ0003/ids/JOB05944/files/3': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'JESJCL',
        stepName: undefined,
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/files/3',
        nodeType: 'JOB_OUTPUT_FILE',
        childIds: null,
        hasContent: true,
    }),
    'jobs/ATLJ0003/ids/JOB05944/files/4': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'JESYSMSG',
        stepName: undefined,
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/files/4',
        nodeType: 'JOB_OUTPUT_FILE',
        childIds: null,
        hasContent: true,
    }),
});

export const treeNodesJobsChildDataStepsNodes = [
    {
        name: 'STEPLIB',
        content: 'DSN=ATLAS.TEST.LOAD,DISP=SHR',
        datasets: ['ATLAS.TEST.LOAD'],
        dd: 1 },
    {
        name: 'SYSPRINT',
        content: 'SYSOUT=*',
        datasets: [],
        dd: 2 },
    {
        name: 'SYSOUT',
        content: 'SYSOUT=*',
        datasets: [],
        dd: 3,
    },
];

export const toggledStepsTreeNodesJobs = Map({
    jobs: Map({
        id: 'jobs',
        label: 'JES Jobs',
        nodeType: 'ROOT',
        childNodesURI: 'jobs?owner=',
        childIds: List(['jobs/ATLJ0003']),
        isFetchingChildren: false,
        isToggled: true,
        jobName: '',
    }),
    'jobs/ATLJ0003': Map({
        id: 'jobs/ATLJ0003',
        label: 'ATLJ0003',
        nodeType: 'JOB_NAME',
        isFetchingChildren: false,
        childIds: List(['jobs/ATLJ0003/ids/JOB05944']),
        childNodesURI: 'jobs/ATLJ0003/ids',
        jobName: 'ATLJ0003',
        isToggled: true,
    }),
    'jobs/ATLJ0003/ids/JOB05944': Map({
        isToggled: true,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'JOB05944',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944',
        nodeType: 'JOB_INSTANCE',
        childIds: List([
            'jobs/ATLJ0003/ids/JOB05944/steps',
            'jobs/ATLJ0003/ids/JOB05944/files']),
        returnCode: 'CC 0000',
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps': Map({
        isToggled: true,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'Steps',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/steps',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps',
        nodeType: 'JOB_STEP_PARENT',
        childIds: List(['jobs/ATLJ0003/ids/JOB05944/steps/1']),
    }),
    'jobs/ATLJ0003/ids/JOB05944/files': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'Files',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/files',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/files',
        nodeType: 'JOB_OUTPUT_FILE_PARENT',
        childIds: List([]),
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps/1': Map({
        program: 'IEFBR14',
        isToggled: true,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'UNIT',
        stepNumber: 1,
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/steps/1/dds',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps/1',
        nodeType: 'JOB_STEP',
        childIds: List([]),
    }),
});

export const receivedStepsNodesTreeNodesJobs = Map({
    'jobs/ATLJ0003/ids/JOB05944/steps': Map({
        isToggled: true,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'Steps',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/steps',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps',
        nodeType: 'JOB_STEP_PARENT',
        childIds: List(['jobs/ATLJ0003/ids/JOB05944/steps/1']),
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps/1/dds/1/datasets/ATLAS.TEST.LOAD': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'ATLAS.TEST.LOAD',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps/1/dds/1/datasets/ATLAS.TEST.LOAD',
        nodeType: 'JOB_STEP_DD_DSN',
        childIds: null,
        hasContent: true,
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps/1': Map({
        program: 'IEFBR14',
        isToggled: true,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'UNIT',
        stepNumber: 1,
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/steps/1/dds',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps/1',
        nodeType: 'JOB_STEP',
        childIds: List([
            'jobs/ATLJ0003/ids/JOB05944/steps/1/dds/1',
            'jobs/ATLJ0003/ids/JOB05944/steps/1/dds/2',
            'jobs/ATLJ0003/ids/JOB05944/steps/1/dds/3']),
    }),
    'jobs/ATLJ0003': Map({
        id: 'jobs/ATLJ0003',
        label: 'ATLJ0003',
        nodeType: 'JOB_NAME',
        isFetchingChildren: false,
        childIds: List(['jobs/ATLJ0003/ids/JOB05944']),
        childNodesURI: 'jobs/ATLJ0003/ids',
        jobName: 'ATLJ0003',
        isToggled: true,
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps/1/dds/1': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'STEPLIB',
        content: 'DSN=ATLAS.TEST.LOAD,DISP=SHR',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps/1/dds/1',
        nodeType: 'JOB_STEP_DD',
        childIds: List(['jobs/ATLJ0003/ids/JOB05944/steps/1/dds/1/datasets/ATLAS.TEST.LOAD']),
    }),
    'jobs/ATLJ0003/ids/JOB05944': Map({
        isToggled: true,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'JOB05944',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944',
        nodeType: 'JOB_INSTANCE',
        childIds: List([
            'jobs/ATLJ0003/ids/JOB05944/steps',
            'jobs/ATLJ0003/ids/JOB05944/files']),
        returnCode: 'CC 0000',
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps/1/dds/2': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'SYSPRINT',
        content: 'SYSOUT=*',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps/1/dds/2',
        nodeType: 'JOB_STEP_DD',
        childIds: null,
    }),
    'jobs/ATLJ0003/ids/JOB05944/steps/1/dds/3': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        owner: 'JCAIN',
        label: 'SYSOUT',
        content: 'SYSOUT=*',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/steps/1/dds/3',
        nodeType: 'JOB_STEP_DD',
        childIds: null,
    }),
    jobs: Map({
        id: 'jobs',
        label: 'JES Jobs',
        nodeType: 'ROOT',
        childNodesURI: 'jobs?owner=',
        childIds: List(['jobs/ATLJ0003']),
        isFetchingChildren: false,
        isToggled: true,
        jobName: '',
    }),
    'jobs/ATLJ0003/ids/JOB05944/files': Map({
        isToggled: false,
        jobName: 'ATLJ0003',
        isFetchingChildren: false,
        status: 'OUTPUT',
        owner: 'JCAIN',
        label: 'Files',
        childNodesURI: 'jobs/ATLJ0003/ids/JOB05944/files',
        type: 'JOB',
        id: 'jobs/ATLJ0003/ids/JOB05944/files',
        nodeType: 'JOB_OUTPUT_FILE_PARENT',
        childIds: List([]),
    }),
});
